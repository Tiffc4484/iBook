{"ast":null,"code":"var _jsxFileName = \"/Users/tiffany/Desktop/iBook/src/Authentication/SignUpScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport InputBox from \"./InputBox.js\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Signup() {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [password_confirm, setPasswordConfirm] = useState(\"\");\n  const [toggle_visibility, setToggleVisibility] = useState(\"password\"); //const history = useHistory();\n\n  function handleEmail(evt) {\n    setEmail(evt.target.value);\n  }\n\n  function handlePassword(evt) {\n    setPassword(evt.target.value);\n  }\n\n  function handlePasswordConfirm(evt) {\n    setPasswordConfirm(evt.target.value);\n\n    if (evt.target.value !== password) {\n      evt.target.classList.add(\"is-invalid\");\n    } else {\n      evt.target.classList.remove(\"is-invalid\");\n    }\n  }\n\n  function handleToggleVisibility() {\n    setToggleVisibility(toggle_visibility === \"password\" ? \"text\" : \"password\");\n  }\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n\n    if (!evt.target.checkValidity()) {\n      return evt.target.classList.add(\"was-validated\");\n    }\n\n    setEmail(\"\");\n    setPassword(\"\");\n    setPasswordConfirm(\"\");\n    const hash = await password.hashCode();\n    fetch(\"/authentication/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: hash\n      })\n    }).then(resRaw => {\n      if (!resRaw.ok) {\n        resRaw.text().then(res => {\n          alert(res);\n        });\n      } else {\n        alert(\"Sign up succeed\");\n        history.push(\"/auth/login\");\n      }\n    }).catch(err => {\n      alert(err);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    onSubmit: handleSubmit,\n    noValidate: true,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center mb-4\",\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      label: \"Email\",\n      value: email,\n      type: \"email\",\n      onChange: handleEmail,\n      feedback: \"Please provide a valid email address\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      label: \"Password\",\n      value: password,\n      type: toggle_visibility,\n      onChange: handlePassword,\n      feedback: \"Please provide a valid password\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      label: \"Confirm Password\",\n      value: password_confirm,\n      onChange: handlePasswordConfirm,\n      type: toggle_visibility,\n      feedback: \"Password and confirm password does not match\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3 form-check\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-check-label\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          className: \"form-check-input\",\n          onClick: handleToggleVisibility\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), \"Show Password\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mb-3 btn btn-custom text-center\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-2 d-flex justify-content-end\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        className: \"text-end d-block\",\n        to: \"/auth/login\",\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Signup, \"S6uG61aEngojVltpTaoQUHwX5x8=\");\n\n_c = Signup;\n\nString.prototype.hashCode = async function () {\n  // encode as (utf-8) Uint8Array\n  const msgUint8 = new TextEncoder().encode(this); // hash the message\n\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgUint8); // convert buffer to byte array\n\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert bytes to hex string\n\n  return hashArray.map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/Users/tiffany/Desktop/iBook/src/Authentication/SignUpScreen.js"],"names":["React","useState","InputBox","Link","Signup","email","setEmail","password","setPassword","password_confirm","setPasswordConfirm","toggle_visibility","setToggleVisibility","handleEmail","evt","target","value","handlePassword","handlePasswordConfirm","classList","add","remove","handleToggleVisibility","handleSubmit","preventDefault","checkValidity","hash","hashCode","fetch","method","headers","body","JSON","stringify","then","resRaw","ok","text","res","alert","history","push","catch","err","String","prototype","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","map","b","toString","padStart","join"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,SAASC,IAAT,QAAoB,kBAApB;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,gBAAD,EAAmBC,kBAAnB,IAAyCT,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAACU,iBAAD,EAAoBC,mBAApB,IAA2CX,QAAQ,CAAC,UAAD,CAAzD,CAJ6B,CAK7B;;AAEA,WAASY,WAAT,CAAqBC,GAArB,EAA0B;AACtBR,IAAAA,QAAQ,CAACQ,GAAG,CAACC,MAAJ,CAAWC,KAAZ,CAAR;AACH;;AAED,WAASC,cAAT,CAAwBH,GAAxB,EAA6B;AACzBN,IAAAA,WAAW,CAACM,GAAG,CAACC,MAAJ,CAAWC,KAAZ,CAAX;AACH;;AAED,WAASE,qBAAT,CAA+BJ,GAA/B,EAAoC;AAChCJ,IAAAA,kBAAkB,CAACI,GAAG,CAACC,MAAJ,CAAWC,KAAZ,CAAlB;;AACA,QAAIF,GAAG,CAACC,MAAJ,CAAWC,KAAX,KAAqBT,QAAzB,EAAmC;AAC/BO,MAAAA,GAAG,CAACC,MAAJ,CAAWI,SAAX,CAAqBC,GAArB,CAAyB,YAAzB;AACH,KAFD,MAEO;AACHN,MAAAA,GAAG,CAACC,MAAJ,CAAWI,SAAX,CAAqBE,MAArB,CAA4B,YAA5B;AACH;AACJ;;AAED,WAASC,sBAAT,GAAkC;AAC9BV,IAAAA,mBAAmB,CAACD,iBAAiB,KAAK,UAAtB,GAAmC,MAAnC,GAA4C,UAA7C,CAAnB;AACH;;AAED,iBAAeY,YAAf,CAA4BT,GAA5B,EAAiC;AAC7BA,IAAAA,GAAG,CAACU,cAAJ;;AACA,QAAI,CAACV,GAAG,CAACC,MAAJ,CAAWU,aAAX,EAAL,EAAiC;AAC7B,aAAOX,GAAG,CAACC,MAAJ,CAAWI,SAAX,CAAqBC,GAArB,CAAyB,eAAzB,CAAP;AACH;;AACDd,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACA,UAAMgB,IAAI,GAAG,MAAMnB,QAAQ,CAACoB,QAAT,EAAnB;AACAC,IAAAA,KAAK,CAAC,wBAAD,EAA2B;AAC5BC,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFmB;AAK5BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB5B,QAAAA,KAAK,EAAEA,KADU;AAEjBE,QAAAA,QAAQ,EAAEmB;AAFO,OAAf;AALsB,KAA3B,CAAL,CAUKQ,IAVL,CAUWC,MAAD,IAAY;AACd,UAAI,CAACA,MAAM,CAACC,EAAZ,EAAgB;AACZD,QAAAA,MAAM,CAACE,IAAP,GAAcH,IAAd,CAAoBI,GAAD,IAAS;AACxBC,UAAAA,KAAK,CAACD,GAAD,CAAL;AACH,SAFD;AAGH,OAJD,MAIO;AACHC,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACAC,QAAAA,OAAO,CAACC,IAAR,CAAa,aAAb;AACH;AACJ,KAnBL,EAoBKC,KApBL,CAoBYC,GAAD,IAAS;AACZJ,MAAAA,KAAK,CAACI,GAAD,CAAL;AACH,KAtBL;AAuBH;;AAED,sBACI;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAuB,IAAA,QAAQ,EAAEpB,YAAjC;AAA+C,IAAA,UAAU,MAAzD;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,QAAD;AACI,MAAA,KAAK,EAAC,OADV;AAEI,MAAA,KAAK,EAAElB,KAFX;AAGI,MAAA,IAAI,EAAC,OAHT;AAII,MAAA,QAAQ,EAAEQ,WAJd;AAKI,MAAA,QAAQ,EAAC,sCALb;AAMI,MAAA,QAAQ,EAAE;AANd;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI,QAAC,QAAD;AACI,MAAA,KAAK,EAAC,UADV;AAEI,MAAA,KAAK,EAAEN,QAFX;AAGI,MAAA,IAAI,EAAEI,iBAHV;AAII,MAAA,QAAQ,EAAEM,cAJd;AAKI,MAAA,QAAQ,EAAC,iCALb;AAMI,MAAA,QAAQ,EAAE;AANd;AAAA;AAAA;AAAA;AAAA,YAVJ,eAkBI,QAAC,QAAD;AACI,MAAA,KAAK,EAAC,kBADV;AAEI,MAAA,KAAK,EAAER,gBAFX;AAGI,MAAA,QAAQ,EAAES,qBAHd;AAII,MAAA,IAAI,EAAEP,iBAJV;AAKI,MAAA,QAAQ,EAAC,8CALb;AAMI,MAAA,QAAQ,EAAE;AANd;AAAA;AAAA;AAAA;AAAA,YAlBJ,eA0BI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACI;AAAO,QAAA,SAAS,EAAC,kBAAjB;AAAA,gCACI;AACI,UAAA,IAAI,EAAC,UADT;AAEI,UAAA,SAAS,EAAC,kBAFd;AAGI,UAAA,OAAO,EAAEW;AAHb;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YA1BJ,eAoCI;AAAQ,MAAA,SAAS,EAAC,iCAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApCJ,eAqCI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,kBAAhB;AAAmC,QAAA,EAAE,EAAC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6CH;;GA3GuBlB,M;;KAAAA,M;;AA6GxBwC,MAAM,CAACC,SAAP,CAAiBlB,QAAjB,GAA4B,kBAAkB;AAC1C;AACA,QAAMmB,QAAQ,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyB,IAAzB,CAAjB,CAF0C,CAG1C;;AACA,QAAMC,UAAU,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqB,SAArB,EAAgCN,QAAhC,CAAzB,CAJ0C,CAK1C;;AACA,QAAMO,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,UAAJ,CAAeP,UAAf,CAAX,CAAlB,CAN0C,CAO1C;;AACA,SAAOI,SAAS,CAACI,GAAV,CAAeC,CAAD,IAAOA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CAArB,EAAsDC,IAAtD,CAA2D,EAA3D,CAAP;AACH,CATD","sourcesContent":["import React, { useState } from \"react\";\nimport InputBox from \"./InputBox.js\";\nimport { Link} from \"react-router-dom\";\n\nexport default function Signup() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [password_confirm, setPasswordConfirm] = useState(\"\");\n    const [toggle_visibility, setToggleVisibility] = useState(\"password\");\n    //const history = useHistory();\n\n    function handleEmail(evt) {\n        setEmail(evt.target.value);\n    }\n\n    function handlePassword(evt) {\n        setPassword(evt.target.value);\n    }\n\n    function handlePasswordConfirm(evt) {\n        setPasswordConfirm(evt.target.value);\n        if (evt.target.value !== password) {\n            evt.target.classList.add(\"is-invalid\");\n        } else {\n            evt.target.classList.remove(\"is-invalid\");\n        }\n    }\n\n    function handleToggleVisibility() {\n        setToggleVisibility(toggle_visibility === \"password\" ? \"text\" : \"password\");\n    }\n\n    async function handleSubmit(evt) {\n        evt.preventDefault();\n        if (!evt.target.checkValidity()) {\n            return evt.target.classList.add(\"was-validated\");\n        }\n        setEmail(\"\");\n        setPassword(\"\");\n        setPasswordConfirm(\"\");\n        const hash = await password.hashCode();\n        fetch(\"/authentication/signup\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                email: email,\n                password: hash,\n            }),\n        })\n            .then((resRaw) => {\n                if (!resRaw.ok) {\n                    resRaw.text().then((res) => {\n                        alert(res);\n                    });\n                } else {\n                    alert(\"Sign up succeed\");\n                    history.push(\"/auth/login\");\n                }\n            })\n            .catch((err) => {\n                alert(err);\n            });\n    }\n\n    return (\n        <form className=\"form\" onSubmit={handleSubmit} noValidate>\n            <h1 className=\"text-center mb-4\">Sign Up</h1>\n            <InputBox\n                label=\"Email\"\n                value={email}\n                type=\"email\"\n                onChange={handleEmail}\n                feedback=\"Please provide a valid email address\"\n                required={true}\n            />\n            <InputBox\n                label=\"Password\"\n                value={password}\n                type={toggle_visibility}\n                onChange={handlePassword}\n                feedback=\"Please provide a valid password\"\n                required={true}\n            />\n            <InputBox\n                label=\"Confirm Password\"\n                value={password_confirm}\n                onChange={handlePasswordConfirm}\n                type={toggle_visibility}\n                feedback=\"Password and confirm password does not match\"\n                required={true}\n            />\n            <div className=\"mb-3 form-check\">\n                <label className=\"form-check-label\">\n                    <input\n                        type=\"checkbox\"\n                        className=\"form-check-input\"\n                        onClick={handleToggleVisibility}\n                    />\n                    Show Password\n                </label>\n            </div>\n            <button className=\"mb-3 btn btn-custom text-center\">Submit</button>\n            <div className=\"mb-2 d-flex justify-content-end\">\n                <Link className=\"text-end d-block\" to=\"/auth/login\">\n                    Log in\n                </Link>\n            </div>\n        </form>\n    );\n}\n\nString.prototype.hashCode = async function () {\n    // encode as (utf-8) Uint8Array\n    const msgUint8 = new TextEncoder().encode(this);\n    // hash the message\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgUint8);\n    // convert buffer to byte array\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    // convert bytes to hex string\n    return hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n};"]},"metadata":{},"sourceType":"module"}